import math
import decimal
from Crypto.Util.number import long_to_bytes

decimal.getcontext().prec = 4096

def solve_quadratic(a, b, c):
    d = (b**2) - (4*a*c)
    
    if d < 0:
        return (None, None)
    
    sol1 = (-b-pow(d, decimal.Decimal(0.5)))/(2*a)
    sol2 = (-b+pow(d, decimal.Decimal(0.5)))/(2*a)
    return (sol1, sol2)

N = decimal.Decimal(3275733051034358984052873301763419226982953208866734590577442123100212241755791923555521543209801099055699081707325573295107810120279016450478569963727745375599027892100123044479660797401966572267597729137245240398252709789403914717981992805267568330238483858915840720285089128695716116366797390222336632152162599116524881401005018469215424916742801818134711336300828503706379381178900753467864554260446708842162773345348298157467411926079756092147544497068000233007477191578333572784654318537785544709699328915760518608291118807464400785836835778315009377442766842129158923286952014836265426233094717963075689446543)
e = decimal.Decimal(65537)
r_p = decimal.Decimal(5555)
r_q = decimal.Decimal(2021)
c = decimal.Decimal(1556192154031991594732510705883546583096229743096303430901374706824505750761088363281890335979653013911714293502545423757924361475736093242401222947901355869932133190452403616496603786871994754637823336368216836022953863014593342644392369877974990401809731572974216127814977558172171864993498081681595043521251475276813852699339208084848504200274031750249400405999547189108618939914820295837292164648879085448065561197691023430722069818332742153760012768834458654303088057879612122947985115227503445210002797443447539212535515235045439442675101339926607807561016634838677881127459579466831387538801957970278441177712)

i = decimal.Decimal(math.ceil(math.sqrt(r_p * r_q)))
p = None
q = None
while True:
    delta = pow(round(pow(N, decimal.Decimal(0.5))) - i, 2)
    z = (N - r_p * r_q) % delta

    x1, x2 = solve_quadratic(1, -z, delta * r_p * r_q)
    temp_p = N / ((x1/r_p) + r_q)
    temp_q = N / ((x2/r_q) + r_p)
    if temp_p % 1 == 0 and temp_q % 1 == 0:
        p = temp_p
        q = temp_q
        break
    print(i)
    i += 1

print("p, q found")
print(p)
print("")
print(q)

##p = decimal.Decimal(108184544206416690255057174683512849164352864898641221024423852923499619816464228501787188828308478147028050515283321237418751127388039151111921026134499835134437853953405740385336512414807105672389580362123186568582794423700979776055731240000533525835803572334772372797841808369997777439057986297496796711479)
##q = decimal.Decimal(30279122355816767721803832367762393967815793910141820004621479748503987014756835709273218263355674038039396811683729196865782141786609687391671491914229314082131512789433386177223269827205117595087572962082065025662422317527786293651619040640171644562678430935883533645710437831359810546324926963524241216617)

d = None
rho = (p - 1) * (q - 1)
j = 1
while True:
    j += rho
    temp_d = j / e
    if temp_d % 1 == 0:
        d = temp_d
        break

print("d found")

result = pow(c, d, N)

result = int(str(result))
print(long_to_bytes(result).decode())
